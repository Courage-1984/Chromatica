---
description: Comprehensive documentation standards and lifecycle management
globs: ["docs/**/*", "**/*.md", "**/*.py"]
alwaysApply: false
---

# Documentation Standards and Lifecycle Management

## Overview

This rule establishes comprehensive documentation standards for the Chromatica project, ensuring that all code changes are accompanied by appropriate documentation updates. Documentation is treated as a first-class citizen with the same priority as code quality.

## Mandatory Documentation Requirements

### Documentation Lifecycle

- **MANDATORY**: Documentation updates are REQUIRED for ALL project changes
- **No exceptions**: No code changes should be committed without corresponding documentation updates
- **Timing**: Documentation must be updated before or simultaneously with code implementation
- **Quality**: All documentation must meet established quality standards

### Change Types Requiring Documentation

- **New Features**: Every new feature, module, class, or function
- **Bug Fixes**: All bug fixes and error resolutions
- **Enhancements**: Performance improvements, optimizations, and refactoring
- **API Changes**: Endpoint modifications, request/response model updates
- **Configuration Changes**: New constants, environment variables, or settings
- **Dependency Updates**: New libraries, version changes, or removal of dependencies
- **Testing Updates**: New test cases, testing tools, or validation procedures

## Documentation Quality Standards

### Comprehensive Coverage

- **Purpose & Goals**: Clear explanation of what the component does and why it exists
- **Features & Capabilities**: Complete list of functionality and capabilities
- **Usage Examples**: Practical code examples for both simple and complex use cases
- **Integration Patterns**: How the component works with other parts of the system
- **Configuration Options**: All parameters, settings, and customization options
- **Error Handling**: Common error scenarios and resolution steps
- **Performance Characteristics**: Benchmarks, metrics, and optimization guidelines

### Quality Requirements

- **Accuracy**: All examples must be tested and verified to work
- **Completeness**: Cover all aspects of functionality without gaps
- **Clarity**: Use clear, concise language with appropriate technical detail
- **Consistency**: Maintain uniform style, format, and terminology across all docs
- **Currency**: Documentation must be updated immediately when code changes

## Documentation Types and Structure

### API Documentation

- **Complete endpoint documentation** with examples
- **Request/response models** with field descriptions
- **Error codes and messages** with resolution steps
- **Performance characteristics** and limitations
- **Authentication and authorization** requirements

### User Guides

- **Step-by-step tutorials** for common workflows
- **Getting started guides** for new users
- **Advanced usage patterns** for power users
- **Troubleshooting guides** for common issues
- **Best practices** and recommendations

### Developer Guides

- **Technical implementation details** and architecture
- **Development setup** and environment configuration
- **Code organization** and module structure
- **Testing strategies** and validation procedures
- **Deployment procedures** and production considerations

### Module Documentation

- **Purpose and responsibilities** of each module
- **Public API** with function and class documentation
- **Internal architecture** and design decisions
- **Integration points** with other modules
- **Performance characteristics** and optimization opportunities

## Documentation File Organization

### Required Structure

```
docs/
├── api/                           # API endpoint documentation
│   ├── endpoints.md              # Complete API reference
│   ├── models.md                 # Request/response models
│   └── examples.md               # API usage examples
├── guides/                       # User and developer guides
│   ├── getting_started.md        # Setup and first steps
│   ├── user_workflows.md         # Common user scenarios
│   ├── development.md            # Development setup and practices
│   └── deployment.md             # Production deployment
├── modules/                      # Module-specific documentation
│   ├── core/                     # Core module documentation
│   ├── indexing/                 # Indexing system documentation
│   ├── api/                      # API module documentation
│   └── utils/                    # Utility module documentation
├── tools/                        # Tool documentation
│   ├── test_histogram_generation.md
│   ├── demo.md
│   ├── demo_search.md
│   └── [other tool docs]
├── troubleshooting/               # Problem resolution guides
│   ├── common_issues.md          # Frequently encountered problems
│   ├── error_codes.md            # Error code explanations
│   └── performance_issues.md     # Performance troubleshooting
├── progress.md                    # Project progress tracking
├── changelog.md                  # Version history and changes
└── README.md                     # Project overview and setup
```

## Code Documentation Standards

### Python Docstrings

- **Google-style docstrings** for all functions, classes, and modules
- **Type hints** for all parameters and return values
- **Examples** in docstrings for complex functions
- **Mathematical explanations** for algorithmic functions
- **Error conditions** and exception descriptions

### Example Docstring Format

```python
def build_histogram(lab_pixels: np.ndarray) -> np.ndarray:
    """
    Converts Lab pixels into a normalized, soft-assigned histogram.

    This function implements tri-linear soft assignment to distribute pixel counts
    across neighboring bins, creating a robust representation that is less sensitive
    to minor color variations. The final histogram is L1-normalized to create a
    probability distribution suitable for distance calculations.

    Mathematical Process:
    1. Convert Lab coordinates to continuous bin indices
    2. Calculate the fractional parts for tri-linear interpolation
    3. Distribute pixel counts to the 8 nearest bin centers using weights
    4. Flatten the 3D histogram to a 1D vector
    5. L1-normalize to create a probability distribution

    Args:
        lab_pixels: Array of Lab color values, shape (N, 3)

    Returns:
        Normalized histogram vector of shape (1152,)

    Raises:
        ValueError: If input validation fails or Lab values are out of range

    Example:
        >>> lab_pixels = np.array([[50.0, 0.0, 0.0], [75.0, 10.0, -5.0]])
        >>> histogram = build_histogram(lab_pixels)
        >>> print(histogram.shape)
        (1152,)
    """
```

### Module Documentation

- **Module-level docstring** explaining purpose and key features
- **Import organization** with clear grouping
- **Constants documentation** with explanations
- **Class and function organization** with clear structure

## Documentation Update Workflow

### Pre-Implementation

1. **Plan documentation updates** alongside code changes
2. **Identify affected documentation** files and sections
3. **Prepare documentation templates** for new features
4. **Review existing documentation** for consistency

### During Implementation

1. **Create/update documentation** simultaneously with code
2. **Test all examples** and code snippets
3. **Validate documentation accuracy** against implementation
4. **Update related documentation** files as needed

### Post-Implementation

1. **Verify documentation completeness** and accuracy
2. **Test all examples** and procedures
3. **Update documentation indexes** and cross-references
4. **Review documentation quality** against standards

### Review Process

1. **Include documentation review** in code review process
2. **Verify documentation updates** for all code changes
3. **Test documentation examples** and procedures
4. **Validate documentation consistency** across project

## Documentation Maintenance Schedule

### Regular Maintenance Tasks

- **Weekly**: Review documentation for any code changes made during the week
- **Bi-weekly**: Update progress reports and milestone tracking
- **Monthly**: Comprehensive documentation review and quality assessment
- **Per Release**: Update version numbers, changelog, and migration guides
- **Per Major Feature**: Create comprehensive feature documentation

### Documentation Debt Management

- **Identification**: Regularly identify outdated or incomplete documentation
- **Prioritization**: Treat documentation debt with same priority as technical debt
- **Resolution**: Allocate dedicated time for documentation improvements
- **Prevention**: Establish documentation requirements in development workflow

## Success Metrics for Documentation

### Quality Indicators

- **Completeness**: 100% of functionality documented
- **Accuracy**: 0% of documentation errors or outdated information
- **Usability**: Clear examples and procedures for all common tasks
- **Maintenance**: Documentation updated within 24 hours of code changes
- **User Satisfaction**: Documentation effectively supports user needs

### Compliance Requirements

- **Mandatory**: No code changes without documentation updates
- **Timing**: Documentation must be updated before or simultaneously with code
- **Quality**: All documentation must meet quality standards
- **Review**: Documentation changes must be reviewed and approved
- **Testing**: All examples and procedures must be verified

## Documentation Review Checklist

### For Every Code Change

- [ ] All new functionality is documented
- [ ] All modified functionality has updated documentation
- [ ] All examples are tested and verified
- [ ] All configuration options are documented
- [ ] All error scenarios are covered
- [ ] Integration examples are provided
- [ ] Performance characteristics are documented
- [ ] Troubleshooting steps are clear and actionable

### For New Features

- [ ] Purpose and goals are clearly explained
- [ ] Features and capabilities are comprehensively listed
- [ ] Usage examples are provided for common scenarios
- [ ] Integration patterns are documented
- [ ] Configuration options are fully described
- [ ] Error handling scenarios are covered
- [ ] Performance characteristics are documented

### For API Changes

- [ ] Endpoint documentation is updated
- [ ] Request/response models are documented
- [ ] Error codes and messages are updated
- [ ] Examples are provided for new endpoints
- [ ] Migration guides are created for breaking changes
- [ ] Performance impact is documented

## Documentation Tools and Automation

### Documentation Generation

- **Automated docstring extraction** for API documentation
- **Code example validation** to ensure examples work
- **Cross-reference validation** to check internal links
- **Format consistency checking** for markdown files

### Documentation Testing

- **Example code testing** to ensure all examples work
- **Link validation** to check external and internal links
- **Format validation** for markdown and other formats
- **Completeness checking** for required documentation sections

### Documentation Deployment

- **Automated deployment** of documentation updates
- **Version control integration** for documentation changes
- **Change tracking** for documentation updates
- **Rollback procedures** for documentation issues

## Enforcement and Compliance

### Development Workflow Integration

- **Pre-commit hooks** to check documentation requirements
- **CI/CD integration** to validate documentation updates
- **Code review requirements** for documentation changes
- **Release gate requirements** for documentation completeness

### Quality Assurance

- **Regular documentation audits** to ensure compliance
- **Documentation quality metrics** and reporting
- **User feedback collection** on documentation quality
- **Continuous improvement** based on feedback and metrics

### Training and Support

- **Documentation standards training** for all developers
- **Documentation tools training** for efficient documentation
- **Best practices sharing** across the development team
- **Documentation mentorship** for new team members
